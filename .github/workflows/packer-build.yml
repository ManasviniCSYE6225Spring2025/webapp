name: Packer Build

on:
  push:
    branches:
      - main

jobs:
  build_packer_image:
    name: Build Packer Image for AWS and GCP
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest

      # ✅ Install & Configure AWS CLI using AWS Marketplace Action
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Change to your AWS region

      - name: Verify AWS CLI Installation
        run: aws --version

      # ✅ Install & Configure GCP CLI using GCP Marketplace Action
      - name: Authenticate GCP CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Verify GCP CLI Installation
        run: gcloud --version


      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          # Add integration test commands here

      - name: Build Application Artifact
        run: |
          echo "Building application artifact..."
          # Replace with actual build commands, e.g.:
          # mvn package -DskipTests (for Java)
          # npm install && npm run build (for Node.js)
          # python setup.py sdist (for Python)
          zip -r webapp.zip .

      - name: Initialize Packer
        run: packer init .

      - name: Build Packer Image for AWS and GCP
        run: |
          packer build -var "aws_region=us-east-1" -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" .

      - name: Pass the AMI to Demo in AWS
        run: |
          AMI_ID=$(jq -r '[.builds[] | select(.builder_type=="amazon-ebs")] | max_by(.build_time) | .artifact_id' image_manifest.json | cut -d':' -f2)

          if [ -z "$AMI_ID" ] || [ "$AMI_ID" == "null" ]; then
            echo "Error: AMI ID not found!"
            exit 1
          fi
          
          echo "AMI ID: $AMI_ID"
          
          TARGET_AWS_ACCOUNT="${{ secrets.AWS_DEMO_ACCOUNT_ID }}"
          echo "Target AWS Account: $TARGET_AWS_ACCOUNT"

          SNAPSHOT_ID=$(aws ec2 describe-images --image-ids $AMI_ID --query "Images[0].BlockDeviceMappings[0].Ebs.SnapshotId" --output text)
          echo "Associated Snapshot ID: $SNAPSHOT_ID"

          # Share AMI with DEMO account
          aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "Add=[{UserId=$TARGET_AWS_ACCOUNT}]"

          # Share associated snapshot with DEMO account
          aws ec2 modify-snapshot-attribute --snapshot-id $SNAPSHOT_ID --attribute createVolumePermission --operation-type add --user-ids $TARGET_AWS_ACCOUNT

          # Verify AMI sharing
          aws ec2 describe-image-attribute --image-id $AMI_ID --attribute launchPermission

          # Verify snapshot sharing
          aws ec2 describe-snapshot-attribute --snapshot-id $SNAPSHOT_ID --attribute createVolumePermission
  
