name: Packer Build

on:
  push:
    branches:
      - main

jobs:
  build_packer_image:
    name: Build Packer Image for AWS and GCP
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest

      # ✅ Install & Configure AWS CLI using AWS Marketplace Action
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      - name: Verify AWS CLI Installation
        run: aws --version

      # ✅ Install & Configure GCP CLI using GCP Marketplace Action
      - name: Authenticate GCP CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Verify GCP CLI Installation
        run: gcloud --version


      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          # Add integration test commands here

      - name: Build Application Artifact
        run: |
          echo "Building application artifact..."
          # Replace with actual build commands, e.g.:
          # mvn package -DskipTests (for Java)
          # npm install && npm run build (for Node.js)
          # python setup.py sdist (for Python)
          zip -r webapp.zip .

      - name: Initialize Packer
        run: packer init .

      - name: Build Packer Image for AWS and GCP
        run: |
          packer build -var "aws_region=us-east-1" -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" .
      # - name: Build Packer Image for AWS and GCP
      #   run: |
      #       packer build -machine-readable -var "aws_region=us-east-1" -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" . | tee build.log
      #       packer manifest build.log > image_manifest.json


      - name: Pass the AMI to Demo in AWS
        run: |
          AMI_ID=$(jq -r '[.builds[] | select(.builder_type=="amazon-ebs")] | max_by(.build_time) | .artifact_id' image_manifest.json | cut -d':' -f2)

          if [ -z "$AMI_ID" ] || [ "$AMI_ID" == "null" ]; then
            echo "Error: AMI ID not found!"
            exit 1
          fi
          
          echo "AMI ID: $AMI_ID"
          
          TARGET_AWS_ACCOUNT="${{ secrets.AWS_DEMO_ACCOUNT_ID }}"
          echo "Target AWS Account: $TARGET_AWS_ACCOUNT"

          SNAPSHOT_ID=$(aws ec2 describe-images --image-ids $AMI_ID --query "Images[0].BlockDeviceMappings[0].Ebs.SnapshotId" --output text)
          echo "Associated Snapshot ID: $SNAPSHOT_ID"

          # Share AMI with DEMO account
          aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "Add=[{UserId=$TARGET_AWS_ACCOUNT}]"

          # Share associated snapshot with DEMO account
          aws ec2 modify-snapshot-attribute --snapshot-id $SNAPSHOT_ID --attribute createVolumePermission --operation-type add --user-ids $TARGET_AWS_ACCOUNT

          # Verify AMI sharing
          aws ec2 describe-image-attribute --image-id $AMI_ID --attribute launchPermission

          # Verify snapshot sharing
          aws ec2 describe-snapshot-attribute --snapshot-id $SNAPSHOT_ID --attribute createVolumePermission
      
      - name: Switch to DEMO AWS Account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: us-east-1
     

      - name: Fetch Infra Metadata from AWS Secrets Manager
        id: fetch_infra_metadata
        run: |
            SECRET=$(aws secretsmanager get-secret-value \
            --secret-id infra-secret \
            --region us-east-1 \
            --query SecretString \
            --output text)

            echo "$SECRET" | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV

      - name: Get Launch Template ID by Name
        id: get_launch_template_id
        run: |
          LT_NAME="${{ env.launch_template_name }}" 
          LT_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=$LT_NAME" \
            --query "LaunchTemplates[0].LaunchTemplateId" \
            --output text)
          echo "Launch Template ID: $LT_ID"
          echo "LAUNCH_TEMPLATE_ID=$LT_ID" >> $GITHUB_ENV

      - name: Create New Launch Template Version
        id: create_lt_version
        run: |
          AMI_ID=$(jq -r '[.builds[] | select(.builder_type=="amazon-ebs")] | max_by(.build_time) | .artifact_id' image_manifest.json | cut -d':' -f2)

          echo "Using AMI ID: $AMI_ID to create new Launch Template version..."
          
          aws ec2 create-launch-template-version \
            --launch-template-id "$LAUNCH_TEMPLATE_ID" \
            --source-version 1 \
            --version-description "Updated version with AMI $AMI_ID" \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}"
        env:
         LAUNCH_TEMPLATE_ID: ${{ env.LAUNCH_TEMPLATE_ID }}

      # - name: Set Default Launch Template Version
      #   run: |
      #     aws ec2 modify-launch-template \
      #       --launch-template-id lt-xxxxxxxxxxxxxxxxx  # <-- Replace this too
      #       --default-version $Latest

      - name: Set Default Launch Template Version
        run: |
         LATEST_VERSION=$(aws ec2 describe-launch-template-versions \
         --launch-template-id "$LAUNCH_TEMPLATE_ID" \
         --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber)[-1].VersionNumber' \
         --output text)

         echo "Setting default version to: $LATEST_VERSION"

         aws ec2 modify-launch-template \
         --launch-template-id "$LAUNCH_TEMPLATE_ID" \
         --default-version "$LATEST_VERSION"
        env:
          LAUNCH_TEMPLATE_ID: ${{ env.LAUNCH_TEMPLATE_ID }}


      - name: Start Instance Refresh on ASG
        id: start_refresh
        run: |
          ASG_NAME="${{ env.asg_name }}" 
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$ASG_NAME" \
            --strategy Rolling \
            --query "InstanceRefreshId" --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV
          echo "Started instance refresh with ID: $REFRESH_ID"

      - name: Wait for Instance Refresh to Complete
        run: |
          ASG_NAME="${{ env.asg_name }}" 
          REFRESH_ID="${{ env.REFRESH_ID }}"
          echo "Waiting for instance refresh ($REFRESH_ID) to complete..."

          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status" \
              --output text)

            echo "Current refresh status: $STATUS"

            if [[ "$STATUS" == "Successful" ]]; then
              echo "✅ Instance refresh completed successfully."
              exit 0
            elif [[ "$STATUS" == "Failed" ]]; then
              echo "❌ Instance refresh failed!"
              exit 1
            fi

            echo "⏳ Waiting 30 seconds before checking again..."
            sleep 30
          done

